<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="java" deleted="false" description="A java class that extends the federate code generated by WebGME." enabled="true" name="hla_federate_stub">package ${federation};

import c2w.hla.InteractionRoot;
import c2w.hla.SynchronizedFederate.AdvanceTimeRequest;

/**
 * The ${federate} federate for the ${federation} federation designed in WebGME.
 *
 * This federate MUST join the federation before the federation manager starts the experiment.
 * This means that, when the federate joins, the federation logical time must be 0 and both
 * the readyToPopulate and the readyToRun synchronization points must be defined.
 */
public class ${federate} extends ${federate}Base {
    public ${federate}( String[] args ) throws Exception {
        super( args );
    }
    
    private void execute() throws Exception {
        double logicalTime = 0;
        InteractionRoot interaction;
        
        AdvanceTimeRequest atr = new AdvanceTimeRequest( logicalTime );
        putAdvanceTimeRequest( atr );
        
        readyToPopulate();
        // NOTE: do initialization that depends on other federates here
        readyToRun();
        
        startAdvanceTimeThread();
        
        // executes until the federate terminates
        while( true ) {
            // NOTE: change the federate logical step size below
            logicalTime += 1.0;
            
            atr.requestSyncStart();
            
            // NOTE: send interactions beyond this line (see hla_interaction_send)
            
            // executes until all interactions from the previous time step are handled
            while( (interaction = getNextInteractionNoWait()) != null ) {
                // NOTE: handle all received interactions in this loop (see hla_interaction_handle)
            }
            
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // DO NOT MODIFY FILE BEYOND THIS LINE
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            AdvanceTimeRequest newATR = new AdvanceTimeRequest( logicalTime );
            putAdvanceTimeRequest( newATR );
            atr.requestSyncEnd();
            atr = newATR;
        }
    }
    
    public static void main( String[] args ) {
        try {
            ${federate} ${federate}Instance = new ${federate}( args );
            ${federate}Instance.execute();
        } catch( Exception e ) {
            System.err.println( "Exception caught: " + e.getMessage() );
            e.printStackTrace();
        }
    }
}</template><template autoinsert="false" context="java" deleted="false" description="Handle a received HLA interaction." enabled="true" name="hla_interaction_handle">if( interaction instanceof ${interactionClass} ) {
    // Convert the interaction to the desired interaction class
    ${interactionClass} ${varName} = (${interactionClass})interaction;
    
    // Retrieve the parameters with ${varName}.get_parameterName(); (see hla_interaction_getValue)
}</template><template autoinsert="false" context="java" deleted="false" description="Retrieve a parameter's value from an HLA interaction." enabled="true" name="hla_interaction_getValue">${varName}.get_${paramName}();</template><template autoinsert="false" context="java" deleted="false" description="Create and send an HLA interaction." enabled="true" name="hla_interaction_send">// Create a new ${interactionClass} interaction
${interactionClass} ${varName} = create_${interactionClass}();

// Populate the message using ${varName}.set_parameterName( value ); (see hla_interaction_setValue)

// Send the interaction with a timestamp for the given logical time
${varName}.sendInteraction( getRTI(), logicalTime );</template><template autoinsert="false" context="java" deleted="false" description="Set a parameter's value for an HLA interaction." enabled="true" name="hla_interaction_setValue">${varName}.set_${paramName}( ${value} );</template></templates>